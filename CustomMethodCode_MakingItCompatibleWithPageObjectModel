import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.util.List;

public class CustomDriver {
    private WebDriver driver;
    private final long delayInMillis = 500;
    private final int maxRetries = 3;
    private final int explicitWaitDuration = 10;

    public CustomDriver(WebDriver driver) {
        this.driver = driver;
    }

    private void waitBeforeAction() {
        try {
            Thread.sleep(delayInMillis);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    private WebDriverWait getWait() {
        return new WebDriverWait(driver, explicitWaitDuration);
    }

    private void retryOnFailure(Runnable action) {
        int attempts = 0;
        while (attempts < maxRetries) {
            try {
                waitBeforeAction();
                action.run();
                return;
            } catch (StaleElementReferenceException | ElementClickInterceptedException |
                     NoSuchElementException | ElementNotInteractableException e) {
                System.out.println("Retrying due to: " + e.getClass().getSimpleName());
            }
            attempts++;
            waitBeforeAction();
        }
        throw new RuntimeException("Action failed after " + maxRetries + " attempts.");
    }

    private <T> T retryOnFailureReturn(SupplierWithException<T> action) {
        int attempts = 0;
        while (attempts < maxRetries) {
            try {
                waitBeforeAction();
                return action.get();
            } catch (StaleElementReferenceException | ElementClickInterceptedException |
                     NoSuchElementException | ElementNotInteractableException e) {
                System.out.println("Retrying due to: " + e.getClass().getSimpleName());
            }
            attempts++;
            waitBeforeAction();
        }
        throw new RuntimeException("Failed to retrieve result after " + maxRetries + " attempts.");
    }

    // ---------- For By locators ----------
    public WebElement findElement(By locator) {
        return retryOnFailureReturn(() ->
            getWait().until(ExpectedConditions.presenceOfElementLocated(locator))
        );
    }

    public List<WebElement> findElements(By locator) {
        return retryOnFailureReturn(() -> driver.findElements(locator));
    }

    public void click(By locator) {
        retryOnFailure(() -> {
            getWait().until(ExpectedConditions.elementToBeClickable(locator));
            WebElement element = driver.findElement(locator);
            safeClick(element);
        });
    }

    public void sendKeys(By locator, String text) {
        retryOnFailure(() -> {
            getWait().until(ExpectedConditions.presenceOfElementLocated(locator));
            WebElement element = driver.findElement(locator);
            safeSendKeys(element, text);
        });
    }

    public void clear(By locator) {
        retryOnFailure(() -> {
            WebElement element = driver.findElement(locator);
            safeClear(element);
        });
    }

    // ---------- For WebElements (PageFactory) ----------
    public void click(WebElement element) {
        retryOnFailure(() -> {
            getWait().until(ExpectedConditions.elementToBeClickable(element));
            safeClick(element);
        });
    }

    public void sendKeys(WebElement element, String text) {
        retryOnFailure(() -> {
            getWait().until(ExpectedConditions.visibilityOf(element));
            safeSendKeys(element, text);
        });
    }

    public void clear(WebElement element) {
        retryOnFailure(() -> {
            getWait().until(ExpectedConditions.visibilityOf(element));
            safeClear(element);
        });
    }

    // ---------- Internal safe helpers ----------
    private void safeClick(WebElement element) {
        try {
            element.click();
        } catch (WebDriverException e) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", element);
        }
    }

    private void safeSendKeys(WebElement element, String text) {
        try {
            element.clear();
            element.sendKeys(text);
        } catch (WebDriverException e) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].value = arguments[1];", element, text);
        }
    }

    private void safeClear(WebElement element) {
        try {
            element.clear();
        } catch (WebDriverException e) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].value = '';", element);
        }
    }

    // ---------- WebDriver proxies ----------
    public void get(String url) {
        driver.get(url);
    }

    public void close() {
        driver.close();
    }

    public void quit() {
        driver.quit();
    }

    public WebDriver.Navigation navigate() {
        return driver.navigate();
    }

    public WebDriver.Options manage() {
        return driver.manage();
    }

    public WebDriver.TargetLocator switchTo() {
        return driver.switchTo();
    }

    public String getCurrentUrl() {
        return driver.getCurrentUrl();
    }

    public WebDriver getRawDriver() {
        return driver;
    }

    @FunctionalInterface
    public interface SupplierWithException<T> {
        T get() throws WebDriverException;
    }
}
