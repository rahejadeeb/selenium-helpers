package runner;

import java.io.File;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;

import org.junit.runner.JUnitCore;
import org.junit.runner.Result;

public class MasterTestRunner {

    public static void main(String[] args) throws Exception {
        System.out.println("üé¨ Starting full test run...");

        // Step 1: Run initial full test suite
        Result result = JUnitCore.runClasses(TestRunner.class);

        if (result.wasSuccessful()) {
            System.out.println("‚úÖ All tests passed. No rerun needed.");
            return;
        }

        // Step 2: Check failed scenarios file existence and contents
        String failedFilePath = "target/failed_scenarios.txt";
        File file = new File(failedFilePath);

        if (!file.exists() || file.length() == 0) {
            System.out.println("‚úÖ No failed scenarios recorded.");
            return;
        }

        // Step 3: Fix paths in rerun file to be relative with line numbers and remove empty lines
        List<String> lines = Files.readAllLines(file.toPath());
        List<String> fixedLines = new ArrayList<>();

        String projectDir = System.getProperty("user.dir");
        String featuresBasePath = "src/test/resources/features/";

        for (String line : lines) {
            String trimmed = line.trim();

            // Skip empty lines to avoid trailing newline issues
            if (trimmed.isEmpty()) {
                continue;
            }

            // If absolute path, convert to relative
            if (trimmed.startsWith(projectDir)) {
                String relative = trimmed.substring(projectDir.length());
                if (relative.startsWith("/") || relative.startsWith("\\")) {
                    relative = relative.substring(1);
                }
                fixedLines.add(relative);
                continue;
            }

            // If line only contains filename (no slash), prepend featuresBasePath
            if (!trimmed.contains("/") && !trimmed.contains("\\")) {
                fixedLines.add(featuresBasePath + trimmed);
            } else {
                fixedLines.add(trimmed);
            }
        }

        // Debug print final fixed lines before writing
        System.out.println("Final fixed rerun paths:");
        fixedLines.forEach(System.out::println);

        // Overwrite the rerun file with fixed paths and no trailing empty lines
        Files.write(file.toPath(), fixedLines);

        // Step 4: Rerun failed scenarios
        System.out.println("üîÅ Rerunning failed scenarios...");
        Result rerunResult = JUnitCore.runClasses(RerunFailedScenarios.class);

        if (rerunResult.wasSuccessful()) {
            System.out.println("‚úÖ All failed tests passed in rerun.");
        } else {
            System.out.println("‚ùå Some tests still failed in rerun.");
        }
    }
}
